@page "/"
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop;
@using Nethereum.Generators;

<div class="card">
    <h5 class="card-header">Code Generate Contract Definitions</h5>
    <div class="card-body">

        <div class="form-group row">
            <label for="contractName" class="col-sm-1 col-form-label">Contract Name:</label>
            <div class="col-sm-10">
                <input id="contractName" class="form-control" bind="@contractName" type="text" />
                <small id="contractNameHelp" class="form-text text-muted">The contract name</small>
            </div>
        </div>
        <div class="form-group row">
            <label for="abi" class="col-sm-1 col-form-label">Abi:</label>
            <div class="col-sm-10">
                <input id="abi" class="form-control" bind="@abi" type="text" />
                <small id="abiHelp" class="form-text text-muted">The json smart contract abi</small>
            </div>
        </div>
        <div class="form-group row">
            <label for="byteCode" class="col-sm-1 col-form-label">ByteCode:</label>
            <div class="col-sm-10">
                <input id="byteCode" class="form-control" bind="@byteCode" type="text" />
                <small id="byteCodeHelp" class="form-text text-muted">The smart contract byte code for deployment</small>
            </div>
        </div>
        <div class="form-group row">
            <label for="projectNamespace" class="col-sm-1 col-form-label">Project Namespace:</label>
            <div class="col-sm-10">
                <input id="projectNamespace" class="form-control" bind="@projectNamespace" type="text" />
                <small id="projectNamespace" class="form-text text-muted">The project namespace</small>
            </div>
        </div>
        <div class="form-group row">
            <label for="language" class="col-sm-1 col-form-label">Language:</label>
            <div class="col-sm-10">

                <select id="language" class="form-control mr-sm-2" bind="@language">

                    <option value="0">CSharp</option>
                    <option value="1">Vb.Net</option>
                    <option value="3">FSharp</option>
                </select>

                <small id="languageHelp" class="form-text text-muted">The language to generate the code</small>

            </div>
        </div>
    </div>

    <button class="btn btn-primary" onclick=@GenerateCode>Generate code</button>
    <button class="btn btn-primary" onclick=@CompileSolidity>Compile</button>
</div>
@if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}


<div class="row col-sm-10">
    <pre style="max-width:1600px; overflow-x:scroll"><code class="language-csharp" id="codegen_result"></code></pre>
</div>

<div class="row col-sm-10">
    <pre style="max-width:1600px; overflow-x:scroll"><code>@fsharpResult</code></pre>
</div>

@functions {
    string abi;
    string byteCode;
    string projectNamespace;
    string contractName;
    string result;
    string fsharpResult;
    string error;
    int language;

    private async void GenerateCode()
    {
        try
        {

            fsharpResult = string.Empty;
            if (string.IsNullOrEmpty(contractName)) { throw new Exception("Contract name cannot be null or empty"); }
            if (string.IsNullOrEmpty(projectNamespace)) { throw new Exception("Namespace cannot be null or empty"); }
            if (string.IsNullOrEmpty(abi)) { throw new Exception("Abi cannot be null or empty and valid json"); }


            error = null;
            result = String.Empty;
            //await JSRuntime.InvokeAsync<object>("Prism.highlightAll", null);
            var serviceNamespace = contractName;
            //Same, we are generating single file
            var cqsNamespace = contractName + ".ContractDefinition";
            var dtoNamespace = contractName + ".ContractDefinition";
            var contractAbi = new Nethereum.Generators.Net.GeneratorModelABIDeserialiser().DeserialiseABI(abi);
            var generator = new ContractProjectGenerator(contractAbi, contractName, byteCode, projectNamespace, serviceNamespace, cqsNamespace, dtoNamespace, "", "/", (Nethereum.Generators.Core.CodeGenLanguage)language);
            generator.AddRootNamespaceOnVbProjectsToImportStatements = false;
            var files = generator.GenerateAllMessagesFileAndService();

            foreach (var file in files)
            {
                result = result + "//-----------------------------------------" + Environment.NewLine;
                result = result + "//" + file.FileName + Environment.NewLine;
                result = result + "//-----------------------------------------" + Environment.NewLine;
                result = result + file.GeneratedCode;
            }

            if (language == 3)
            {
                fsharpResult = result;
            }

            await JSRuntime.InvokeAsync<object>("setCodeAndHighlight", "codegen_result", language, result);



        }
        catch (Exception ex)
        {
            error = ex.Message;
        }

    }


    private async void CompileSolidity()
    {
        var contract = @"contract Test {
     function sum(uint256 val) public returns (uint256){
         return val + 10;
     }
  }";

        var result = await JSRuntime.InvokeAsync<object>("compileSolidity", contract, new DotNetObjectRef(this));
        abi = result.ToString();
        StateHasChanged();  
    }

    

    [JSInvokable("SetCompilationOutput")]
    public async Task  SetCompilationOutput(string byteCode, string contractName, string abi)
    {
        this.byteCode = byteCode;
        this.contractName = contractName;
        this.abi = abi;
        StateHasChanged();   
    }
}
